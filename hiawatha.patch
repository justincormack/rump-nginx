--- src/hiawatha.c.orig	2015-01-21 19:00:16.260495180 +0100
+++ src/hiawatha.c	2015-01-21 19:01:04.400495180 +0100
@@ -938,9 +938,11 @@
 	} else if (pthread_attr_setdetachstate(&task_runner_attr, PTHREAD_CREATE_DETACHED) != 0) {
 		log_string(config->system_logfile, "Task-runner pthread set detach state error.");
 		return -1;
+#if 0 /* setstacksize not working yet */
 	} else if (pthread_attr_setstacksize(&task_runner_attr, PTHREAD_STACK_SIZE) != 0) {
 		log_string(config->system_logfile, "Task-runner pthread set stack size error.");
 		return -1;
+#endif
 	} else if (pthread_create(&task_runner_thread, &task_runner_attr, (void*)task_runner, (void*)config) != 0) {
 		log_string(config->system_logfile, "Task-runner pthread create error.");
 		return -1;
--- src/workers.c.orig	2015-01-21 19:01:17.032495180 +0100
+++ src/workers.c	2015-01-21 19:01:40.536495180 +0100
@@ -1366,11 +1366,13 @@
 		pthread_attr_destroy(&child_attr);
 		free(new_thread);
 		return -1;
+#if 0 /* setstacksize not working yet */
 	} else if (pthread_attr_setstacksize(&child_attr, PTHREAD_STACK_SIZE) != 0) {
 		fprintf(stderr, "pthread set stack size error.\n");
 		pthread_attr_destroy(&child_attr);
 		free(new_thread);
 		return -1;
+#endif
 	} else if (pthread_create(&(new_thread->worker), &child_attr, (void*)thread_wait_loop, (void*)new_thread) != 0) {
 		perror("pthread create error");
 		pthread_attr_destroy(&child_attr);
--- config.h.in.orig	2015-01-21 18:59:45.464495180 +0100
+++ config.h.in	2015-01-21 19:00:05.700495180 +0100
@@ -28,7 +28,7 @@
 
 /* Other Hiawatha features
  */
-#define ENABLE_CHALLENGE ON
+/* #define ENABLE_CHALLENGE ON */
 /* #define ENABLE_DEBUG ON */
 #define ENABLE_FILEHASHES ON
 #define ENABLE_THREAD_POOL ON
--- src/cgi.c.orig	2015-01-27 12:42:55.952495180 +0100
+++ src/cgi.c	2015-01-27 12:45:29.948495180 +0100
@@ -24,6 +24,7 @@
 #ifdef HAVE_NETINET_IN_H
 #include <netinet/in.h>
 #endif
+#include <netinet/tcp.h>
 #include "global.h"
 #include "alternative.h"
 #include "libstr.h"
@@ -601,6 +602,10 @@
 				close(sock);
 				sock = -1;
 			}
+			if (sock) {
+				int on = 1;
+				setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on));
+			}
 		}
 #ifdef ENABLE_IPV6
 	} else if (connect_to->ip_addr.family == AF_INET6) {
@@ -615,6 +620,10 @@
 				close(sock);
 				sock = -1;
 			}
+			if (sock) {
+				int on = 1;
+				setsockopt(sock, IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on));
+			}
 		}
 #endif
 	}
